// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-09-01 21:58:06.43941915 +0530 IST m=+0.045875770

package docs

import (
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "contact": {},
        "license": {}
    },
    "paths": {
        "/v1/feedback": {
            "get": {
                "description": "Get FeedbackItems",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin V1"
                ],
                "summary": "Get FeedbackItems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ResponseStruct"
                        }
                    }
                }
            },
            "put": {
                "description": "Submit Feedback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin V1"
                ],
                "summary": "Submit Feedback",
                "parameters": [
                    {
                        "description": "Feedback",
                        "name": "feedback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Feedback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ResponseStruct"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Feedback": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language_code": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "sub_type": {
                    "type": "string"
                },
                "time_stamp": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "user_handle": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FeedbackItemResponse"
                    }
                }
            }
        },
        "models.FeedbackItemResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "response": {
                    "type": "integer"
                }
            }
        },
        "models.ResponseStruct": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "debug": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "exception": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        }
    }
}`

type s struct{}

func (s *s) ReadDoc() string {
	return doc
}
func init() {
	swag.Register(swag.Name, &s{})
}
